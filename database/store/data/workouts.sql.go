// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: workouts.sql

package data

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const getWorkouts = `-- name: GetWorkouts :many
SELECT workouts.id, workouts.name, workouts.created_at, workouts.updated_at, workouts.start_time, workouts.end_time, users.id as user_id
FROM workouts
INNER JOIN users ON workouts.user_id = users.id
WHERE workouts.user_id = $1
`

type GetWorkoutsRow struct {
	ID        uuid.UUID
	Name      string
	CreatedAt time.Time
	UpdatedAt time.Time
	StartTime sql.NullTime
	EndTime   sql.NullTime
	UserID    uuid.UUID
}

func (q *Queries) GetWorkouts(ctx context.Context, userID uuid.NullUUID) ([]GetWorkoutsRow, error) {
	rows, err := q.db.QueryContext(ctx, getWorkouts, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetWorkoutsRow
	for rows.Next() {
		var i GetWorkoutsRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.StartTime,
			&i.EndTime,
			&i.UserID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
